name: Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - dev-prod

concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.platform }} (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            platform: linux
            arch: x64
            
          # Windows
          - os: windows-latest
            platform: win
            arch: x64
            
          # macOS Universal (Intel + Apple Silicon)
          - os: macos-latest
            platform: mac
            arch: universal
            
          # macOS Intel only
          - os: macos-13
            platform: mac
            arch: x64
            
          # macOS Apple Silicon only  
          - os: macos-latest
            platform: mac
            arch: arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      # Linux Build
      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: |
          if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
            npm run dist:dev-prod:linux
          else
            npm run dist:linux
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-linux-${{ matrix.arch }}
          path: |
            dist-electron/*.AppImage
            dist-electron/*.deb
            dist-electron/*.rpm
            dist-electron/*.snap
          retention-days: 30

      # Windows Build
      - name: Build for Windows
        if: matrix.platform == 'win'
        shell: bash
        run: |
          if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
            npm run dist:dev-prod:win
          else
            npm run dist:win
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-win-${{ matrix.arch }}
          path: |
            dist-electron/*.exe
            dist-electron/*.msi
          retention-days: 30

      # macOS Build
      - name: Build for macOS
        if: matrix.platform == 'mac'
        run: |
          # Skip code signing if certificates aren't available
          if [ -z "${{ secrets.MACOS_CERTIFICATE }}" ]; then
            echo "No code signing certificates available, building unsigned app"
            export CSC_IDENTITY_AUTO_DISCOVERY=false
          fi

          # Build based on architecture and build type
          if [ "${{ matrix.arch }}" = "universal" ]; then
            if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
              npm run dist:dev-prod:mac
            else
              npm run dist:mac-universal
            fi
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run dist:mac-arm
          else
            npm run dist:mac-intel
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-mac-${{ matrix.arch }}
          path: |
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/*.pkg
          retention-days: 30

      # Upload build logs on failure
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            npm-debug.log
            dist-electron/builder-debug.yml
            dist-electron/builder-effective-config.yaml
          retention-days: 7

  test-artifacts:
    name: Test Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts structure
        run: |
          echo "Artifact Structure:"
          find artifacts -type f -name "*.AppImage" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" | head -20

      - name: Check artifact sizes
        run: |
          echo "Artifact Sizes:"
          find artifacts -type f \( -name "*.AppImage" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" \) -exec ls -lh {} \;
